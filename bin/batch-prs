#!/bin/bash

# Source helpers
. $DOTFILES/shell/lib/utils

function show_help() {
    echo "Usage: batch-prs -b <base> -h <head> -m <message> -s <script> [<folder> ...]"
    echo ""
    echo 'Example: batch-prs -h feature/php-7.4 -m "Add PHP 7.4 to tested configurations in Travis" -s "vim -p composer.json .travis.yml" *'
    exit 1
}

function nah() {
    git reset --hard
    git clean -df
}

BRANCH_BASE="master"
BRANCH_HEAD=
MESSAGE=
PATH_BASE=$(pwd)

while getopts "b:h:m:s:" opt; do
    case "$opt" in
    b|base)
        BRANCH_BASE=$OPTARG
        ;;
    h|head)
        BRANCH_HEAD=$OPTARG
        ;;
    m|message)
        MESSAGE=$OPTARG
        ;;
    s|script)
        if [ -f "$OPTARG" ]; then
            SCRIPT=$(cat "$OPTARG")
        else
            SCRIPT=$OPTARG
        fi
        ;;
    esac
done

shift $((OPTIND - 1))

if [ $# -eq 0 ] || [ -z "$BRANCH_HEAD" ] || [ -z "$MESSAGE" ] || [ -z "$SCRIPT" ]; then
    show_help
    exit 1
fi

for PATH_DIRECTORY in $@; do
    # 1. Go to repository
    cd "$PATH_BASE/$PATH_DIRECTORY"
    e_header $(basename $(pwd))

    # 2. Check fresh
    if ! git-is-clean; then
        e_error "Repository is not in a clean state. Continue"
        continue
    fi

    # 3. Head branch does not exists
    if git-has-branch "remotes/origin/$BRANCH_HEAD"; then
        e_error "Head branch $BRANCH_HEAD already exists on origin. Continue"
        continue
    fi

    if ! ask_yes_no "Continue?"; then
        continue
    fi

    # 4. Checkout base branch
    e_arrow "Checkout base branch $BRANCH_BASE"
    git checkout --quiet $BRANCH_BASE && git pull --quiet

    # 5. Apply changes
    e_arrow "Apply changes"

    if ! eval $SCRIPT; then
        nah

        e_error "An error occured while applying changes. Abort"
        exit 1
    fi

    # 6. Show diff for approval
    e_arrow "Approving changes"

    if git-is-clean; then
        e_error "No changes have been applied to this repository. Continue"
        continue
    fi

    git diff

    if ! ask_yes_no "Continue and commit changes?"; then
        nah
        continue
    fi

    # 7. Commit all changes
    e_arrow "Commit changes to $BRANCH_HEAD"

    git checkout --quiet -b $BRANCH_HEAD
    git commit -a -m "$MESSAGE"
    git push --set-upstream origin $BRANCH_HEAD

    # 8. Create a pull request
    e_arrow "Create pull request"

    hub pull-request -b "$BRANCH_BASE" -h "$BRANCH_HEAD" --no-edit --browse
done
